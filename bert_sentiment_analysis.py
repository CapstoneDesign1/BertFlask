# # -*- coding: utf-8 -*-
# """BERT-Sentiment-Analysis.ipynb
#
# Automatically generated by Colaboratory.
#
# Original file is located at
#     https://colab.research.google.com/drive/11UkK6dhz0V9fhVvhomAzP7Y8-O4ymTrM
# """
#
# # !pip install mxnet
# # !pip install gluonnlp==0.10.0 pandas tqdm
# # !pip install sentencepiece==0.1.91
# # !pip install transformers==4.8.2
# # !pip install torch
#
# # from google.colab import drive
# # drive.mount('/content/drive')
#
# # !pip install 'git+https://github.com/SKTBrain/KoBERT.git#egg=kobert_tokenizer&subdirectory=kobert_hf'
# # !pip install git+https://git@github.com/SKTBrain/KoBERT.git@master
#
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import gluonnlp as nlp
import numpy as np
from tqdm import tqdm, tqdm_notebook
import pandas as pd

from KoBERT.kobert.pytorch_kobert import get_kobert_model
from KoBERT.kobert_hf.kobert_tokenizer import KoBERTTokenizer
tokenizer = KoBERTTokenizer.from_pretrained('skt/kobert-base-v1')
bertmodel, vocab = get_kobert_model('skt/kobert-base-v1',tokenizer.vocab_file)

from transformers import AdamW
from transformers.optimization import get_cosine_schedule_with_warmup
from transformers import BertModel
#
# ##GPU 사용 시
# device = torch.device("cuda:0")
device = 'cpu'
#
# dataset_train = nlp.data.TSVDataset("/content/drive/MyDrive/train.tsv", field_indices=[1,2],num_discard_samples=1)
# dataset_test = nlp.data.TSVDataset("/content/drive/MyDrive/validation_please.tsv", field_indices=[1,2],num_discard_samples=1)
#
#tokenizer = get_tokenizer()
#bertmodel, vocab = get_kobert_model('skt/kobert-base-v1',tokenizer.vocab_file)
#tok = nlp.data.BERTSPTokenizer(tokenizer, vocab, lower=False)

class BERTDataset(Dataset):
    def __init__(self, dataset, sent_idx, label_idx, bert_tokenizer, vocab, max_len,
                 pad, pair):
        transform = nlp.data.BERTSentenceTransform(
            bert_tokenizer,max_seq_length=max_len,vocab=vocab, pad=pad, pair=pair)

        self.sentences = [transform([i[sent_idx]]) for i in dataset]
        self.labels = [np.int32(i[label_idx]) for i in dataset]

    def __getitem__(self, i):
        return (self.sentences[i] + (self.labels[i], ))

    def __len__(self):
        return (len(self.labels))

## Setting parameters
max_len = 128
batch_size = 64
warmup_ratio = 0.1
num_epochs = 1
max_grad_norm = 1
log_interval = 200
learning_rate =  5e-5

tok=tokenizer.tokenize
# data_train = BERTDataset(dataset_train, 0, 1, tok,vocab, max_len, True, False)
# data_test = BERTDataset(dataset_test,0, 1, tok,vocab, max_len, True, False)
#data_train = BERTDataset(dataset_train, 0, 1, tok, max_len, True, False)
#data_test = BERTDataset(dataset_test, 0, 1, tok, max_len, True, False)

# train_dataloader = torch.utils.data.DataLoader(data_train, batch_size=batch_size, num_workers=5)
# test_dataloader = torch.utils.data.DataLoader(data_test, batch_size=batch_size, num_workers=5)
#


# model = BERTClassifier(bertmodel,  dr_rate=0.5).to(device)
#
# # Prepare optimizer and schedule (linear warmup and decay)
# no_decay = ['bias', 'LayerNorm.weight']
# optimizer_grouped_parameters = [
#     {'params': [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},
#     {'params': [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}
# ]
#
# optimizer = AdamW(optimizer_grouped_parameters, lr=learning_rate)
# loss_fn = nn.CrossEntropyLoss()
#
# t_total = len(train_dataloader) * num_epochs
# warmup_step = int(t_total * warmup_ratio)
#
# scheduler = get_cosine_schedule_with_warmup(optimizer, num_warmup_steps=warmup_step, num_training_steps=t_total)
#
# def calc_accuracy(X,Y):
#     max_vals, max_indices = torch.max(X, 1)
#     train_acc = (max_indices == Y).sum().data.cpu().numpy()/max_indices.size()[0]
#     return train_acc
#
# for e in range(num_epochs):
#     train_acc = 0.0
#     test_acc = 0.0
#     model.train()
#     for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(train_dataloader)):
#         optimizer.zero_grad()
#         token_ids = token_ids.long().to(device)
#         segment_ids = segment_ids.long().to(device)
#         valid_length= valid_length
#         label = label.long().to(device)
#         out = model(token_ids, valid_length, segment_ids)
#         loss = loss_fn(out, label)
#         loss.backward()
#         torch.nn.utils.clip_grad_norm_(model.parameters(), max_grad_norm)
#         optimizer.step()
#         scheduler.step()  # Update learning rate schedule
#         train_acc += calc_accuracy(out, label)
#         if batch_id % log_interval == 0:
#             print("epoch {} batch id {} loss {} train acc {}".format(e+1, batch_id+1, loss.data.cpu().numpy(), train_acc / (batch_id+1)))
#     print("epoch {} train acc {}".format(e+1, train_acc / (batch_id+1)))
#     model.eval()
#     for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(test_dataloader)):
#         token_ids = token_ids.long().to(device)
#         segment_ids = segment_ids.long().to(device)
#         valid_length= valid_length
#         label = label.long().to(device)
#         out = model(token_ids, valid_length, segment_ids)
#         test_acc += calc_accuracy(out, label)
#     print("epoch {} test acc {}".format(e+1, test_acc / (batch_id+1)))
#
# """new_test = nlp.data.TSVDataset('/content/drive/MyDrive/test.tsv', field_indices=[1,2], num_discard_samples=1)
# test_set = BERTDataset(new_test , 0, 1, tok,vocab, max_len,vocab, True, False)
# test_input = torch.utils.data.DataLoader(test_set, batch_size=64, num_workers=5)
#
# f = open('test.txt', mode='wt', encoding='utf-8')
# for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(test_input)):
#   token_ids = token_ids.long().to(device)
#   segment_ids = segment_ids.long().to(device)
#   valid_length= valid_length
#   out = model(token_ids, valid_length, segment_ids)
#   prediction = out.cpu().detach().numpy().argmax()
#   #print(batch_id + "번째 문장의 분류 예측값은" + prediction + "입니다.")
#   f.write(str(prediction))
#   f.write('\n')
# f.close()
# """
#
# #tokenizer = kobert_tokenizer()
# #tok = nlp.data.BERTSPTokenizer(tokenizer, vocab, lower=False)
#
# def predict(input_sentence):
#
#     data = [input_sentence, '0']
#     dataset_predict = [data]
#
#     predict_test = BERTDataset(dataset_predict, 0, 1, tok,vocab, max_len, True, False)
#     test_dataloader = torch.utils.data.DataLoader(predict_test, batch_size=batch_size, num_workers=5)
#
#     model.eval()
#
#     for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
#         token_ids = token_ids.long().to(device)
#         segment_ids = segment_ids.long().to(device)
#         valid_length= valid_length
#         label = label.long().to(device)
#         out = model(token_ids, valid_length, segment_ids)
#
#         test_eval=[]
#         for i in out:
#             logits=i
#             logits = logits.detach().cpu().numpy()
#
#             if np.argmax(logits) == 0:
#                 test_eval.append("기쁨이")
#             elif np.argmax(logits) == 1:
#                 test_eval.append("불안이")
#             elif np.argmax(logits) == 2:
#                 test_eval.append("당황이")
#             elif np.argmax(logits) == 3:
#                 test_eval.append("슬픔이")
#             elif np.argmax(logits) == 4:
#                 test_eval.append("분노가")
#             elif np.argmax(logits) == 5:
#                 test_eval.append("상처가")

        #print(">> 입력하신 내용에서 " + test_eval[0] + " 느껴집니다.")
#
# """
# end = 1
# while end == 1 :
#     input_sentence = input("하고싶은 말을 입력해주세요 : ")
#     if input_sentence == 0 :
#         break
#     predict(input_sentence)
#     print("\n")
# """
#
# # PATH = '/content/drive'
# # torch.save(model, PATH + 'model.pt')
# # torch.save(model.state_dict(), PATH + 'model_state_dict.pt')
# # torch.save({
# #     'model': model.state_dict(),
# #     'optimizer': optimizer.state_dict()
# # }, PATH + 'all.tar')
